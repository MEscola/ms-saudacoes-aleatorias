name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
      - "*" # Para capturar outras branches de feature
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_USER: escolastico
  DOCKER_IMAGE_NAME: ${{ vars.DOCKER_USER || 'escolastico' }}/ms-saudacoes-aleatorias
  DOCKER_IMAGE_TAG: 1.0.${{ github.run_id }}
  SERVICE_NAME: saudacoes-aleatorias

jobs:

  # Job para rodar linters

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' || github.ref_name == 'dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.1"

      - name: Go Fmt & Vet
        run: |
          go fmt $(go list ./...)
          go vet $(go list ./...)

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64
          args: --verbose


  # Job para rodar testes

  test:
    name: Run Go Tests
    runs-on: ubuntu-latest
    needs: lint
    if: github.ref_name == 'main' || github.ref_name == 'dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Run tests and generate report
        run: |
          CGO_ENABLED=1 gotestsum --junitfile report.xml --format testname

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: report.xml


  # Job para build e push Docker

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'dev')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Set branch-safe variable
        id: vars
        run: |
          SAFE_BRANCH=$(echo $GITHUB_REF_NAME | sed 's/\//-/g')
          if [ "$SAFE_BRANCH" = "main" ]; then
            SAFE_BRANCH=""
          fi
          echo "BRANCH_SAFE=$SAFE_BRANCH" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ env.BUILD_TAG }}
            ${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  # Job para deploy

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'dev')
    environment: ${{ github.ref_name == 'main' && 'staging' || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=infra validate

      - name: Terraform Apply
        id: apply
        run: terraform -chdir=infra apply -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
          TF_VAR_docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
          TF_VAR_docker_image_tag: ${{ env.DOCKER_TAG }}


  # Job para destruir infraestrutura

  destroy:
    name: Destroy Staging/Dev
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.ref_name == 'main' && 'staging' || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      - name: Terraform Destroy
        run: terraform -chdir=infra destroy -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}


  # Job final de validaÃ§Ã£o

  success:
    name: âœ… Pipeline Finalizada com Sucesso
    runs-on: ubuntu-latest
    needs: [deploy]
    if: success()
    steps:
      - name: Mensagem de ConclusÃ£o
        run: |
          echo "--------------------------------------------"
          echo "âœ… Todas as etapas concluÃ­das com sucesso!"
          echo "ðŸš€ Lint, Testes, Build, Push e Deploy OK!"
          echo "--------------------------------------------"
