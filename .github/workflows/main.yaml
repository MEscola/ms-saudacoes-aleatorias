name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
      - '*' # Captura outras branches para testes
  pull_request:
    branches:
      - main
  workflow_dispatch: # Permite acionamento manual

env:
  DOCKER_USER: escolastico
  DOCKER_IMAGE_NAME: ${{ vars.DOCKER_USER || 'escolastico' }}/ms-saudacoes-aleatorias
  SERVICE_NAME: saudacoes-aleatorias
jobs:

  # Job de Lint

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' || github.ref_name == 'dev'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.1"
      - name: Go Fmt & Vet
        run: |
          echo "Linting code..."
          go fmt $(go list ./...)
          go vet $(go list ./...)
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64
          args: --verbose


  # Job de Testes

  test:
    name: Run Go Tests
    runs-on: ubuntu-latest
    needs: lint
    if: github.ref_name == 'main' || github.ref_name == 'dev'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest
      - name: Run tests
        run: |
          echo "Running tests..."
          CGO_ENABLED=1 gotestsum --junitfile report.xml --format testname
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: report.xml


  # Job para criar tags seguras e build Docker

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    outputs:
      docker_tag: ${{ steps.set_tag.outputs.docker_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Set Docker tag
        id: set_tag
        run: |
          BRANCH_NAME="${GITHUB_REF_NAME#refs/heads/}"
          BRANCH_SAFE="${BRANCH_NAME//\//-}"
          if [[ "$BRANCH_SAFE" == "main" ]]; then
            DOCKER_TAG="latest"
          elif [[ "$BRANCH_SAFE" == "dev" ]]; then
            DOCKER_TAG="dev-latest"
          else
            DOCKER_TAG="${BRANCH_SAFE}-${GITHUB_RUN_ID}"
          fi
          echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
          echo "‚úÖ Tag gerada: $DOCKER_TAG"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.set_tag.outputs.docker_tag }}


  # Job de Deploy

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'dev')
    environment: ${{ github.ref_name == 'main' && 'staging' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Assign Docker Tag
        run: echo "DOCKER_TAG=${{ needs.build-and-push.outputs.docker_tag }}" >> $GITHUB_ENV

      - name: Verify image availability (retry)
        run: |
          IMAGE="${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}"
          echo "üîç Checking Docker image: $IMAGE"
          tries=0
          until docker pull "$IMAGE"; do
            tries=$((tries+1))
            echo "Attempt $tries/10 failed ‚Äî retrying in 5s..."
            sleep 5
            if [ "$tries" -ge 10 ]; then
              echo "‚ùå Image not found after 10 attempts"
              exit 1
            fi
          done
          echo "‚úÖ Image found and ready to deploy!"
        env:
          DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}

      - name: Terraform Init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      - name: Terraform Validate
        run: terraform -chdir=infra validate

      - name: Terraform Apply
        run: terraform -chdir=infra apply -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
          TF_VAR_docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
          TF_VAR_docker_image_tag: ${{ env.DOCKER_TAG }}
          

  # Job de destruir infraestrutura manual

  destroy:
    name: Destroy Staging/Dev
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref_name != 'main' && success()
    environment: ${{ github.ref_name == 'main' && 'staging' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
      - name: Terraform Destroy
        run: terraform -chdir=infra destroy -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}


  # Job final de valida√ß√£o

  success:
    name: ‚úÖ Pipeline Finalizada com Sucesso
    runs-on: ubuntu-latest
    needs: [deploy]
    if: success()
    steps:
      - name: Mensagem de Conclus√£o
        run: |
          echo "--------------------------------------------"
          echo "‚úÖ Todas as etapas conclu√≠das com sucesso!"
          echo "üöÄ Lint, Testes, Build, Push e Deploy OK!"
          echo "--------------------------------------------"
