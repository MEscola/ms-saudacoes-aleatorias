.ropeproject
.devbox
devbox.lock
.venv
*.db

# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# End of https://mrkandreev.name/snippets/gitignore-generator/#Go

# Terraform
.terraform
.terraform.lock.hcl
.terraform.tfstate
.terraform.tfstate.backup



name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
      - '*' # Captura outras branches para testes
  pull_request:
    branches:
      - main
  workflow_dispatch: # Permite acionamento manual

env:
  DOCKER_USER: escolastico
  DOCKER_IMAGE_NAME: ${{ vars.DOCKER_USER || 'escolastico' }}/ms-saudacoes-aleatorias
  SERVICE_NAME: saudacoes-aleatorias
jobs:

  # Job de Lint

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' || github.ref_name == 'dev'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.1"
      - name: Go Fmt & Vet
        run: |
          echo "Linting code..."
          go fmt $(go list ./...)
          go vet $(go list ./...)
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64
          args: --verbose


  # Job de Testes

  test:
    name: Run Go Tests
    runs-on: ubuntu-latest
    needs: lint
    if: github.ref_name == 'main' || github.ref_name == 'dev'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest
      - name: Run tests
        run: |
          echo "Running tests..."
          CGO_ENABLED=1 gotestsum --junitfile report.xml --format testname
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: report.xml


  # Job para criar tags seguras e build Docker

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'dev')
    steps:
      - uses: actions/checkout@v4

      # ConfiguraÃ§Ã£o Docker multi-plataforma
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      # CriaÃ§Ã£o de tags seguras
      - name: Set Docker image tag
        id: docker-tag
        run: |
          BRANCH_NAME="${GITHUB_REF_NAME##refs/heads/}"
          BRANCH_SAFE="${BRANCH_NAME//\//-}"
          if [ -z "$BRANCH_SAFE" ]; then
            BRANCH_SAFE="run${GITHUB_RUN_ID}"
          fi
          DOCKER_TAG="${BRANCH_SAFE}-${GITHUB_RUN_ID}"
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
          echo "BRANCH_SAFE=$BRANCH_SAFE" >> $GITHUB_ENV

      # Build e push
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}
            ${{ env.DOCKER_IMAGE_NAME }}:${{ env.BRANCH_SAFE == 'main' && 'latest' || 'dev-latest' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  # Job de Deploy

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'dev')
    environment: ${{ github.ref_name == 'main' && 'staging' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
      - name: Terraform Validate
        run: terraform -chdir=infra validate
      - name: Terraform Apply
        run: terraform -chdir=infra apply -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
          TF_VAR_docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
          TF_VAR_docker_image_tag: ${{ env.DOCKER_TAG }}


  # Job de destruir infraestrutura manual

  destroy:
    name: Destroy Staging/Dev
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.ref_name == 'main' && 'staging' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
      - name: Terraform Destroy
        run: terraform -chdir=infra destroy -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}


  # Job final de validaÃ§Ã£o

  success:
    name: âœ… Pipeline Finalizada com Sucesso
    runs-on: ubuntu-latest
    needs: [deploy]
    if: success()
    steps:
      - name: Mensagem de ConclusÃ£o
        run: |
          echo "--------------------------------------------"
          echo "âœ… Todas as etapas concluÃ­das com sucesso!"
          echo "ðŸš€ Lint, Testes, Build, Push e Deploy OK!"
          echo "--------------------------------------------"

